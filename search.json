[{"title":"Win10 使用 Kind 部署 Kubernetes","url":"/2020/11/01/Win10-使用-Kind-部署-Kubernetes/","content":"\n## 背景\nWin10 的 WSL2 支撑了在 Linux 子系统中使用 Docker，尝试在 WSL2 环境下通过 [Kind](https://github.com/kubernetes-sigs/kind) 来部署本地 Kubernetes 环境。\n\n## 操作步骤\n\n### WSL2 安装\n详细文档参考 [Installation Instructions for WSL2](https://docs.microsoft.com/en-us/windows/wsl/install-win10)\n1. 在Windows程序中，选择启用 \"适用于 Linux 的 Windows 子系统\"\n2. 管理员身份打开 PowerShell 并运行 `dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart`\n3. 管理员身份打开 PowerShell 并运行 `wsl --set-default-version 2`\n4. 打开 Microsoft Store，并选择自己偏好的 Linux 分发版\n\n### Docker-desktop 安装\n文档参考 [docker-for-windows](https://docs.docker.com/docker-for-windows/wsl/) 进行 Win10 Docker-desktop 安装\n\n### Kind 安装\n1. 进入 Win10 的 Linux 子系统，在子系统内安装 Kind binary\n```\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.9.0/kind-linux-amd64\nchmod +x ./kind\nmv ./kind /some-dir-in-your-PATH/kind\n```\n2. 准备 Kind 所需的 kindest/node 镜像 `docker pull kindest/node:v1.19.1`\n3. 使用 Kind 命令创建本地 Kubernetes `kind create cluster`\n```\nCreating cluster \"kind\" ...\n ✓ Ensuring node image (kindest/node:v1.19.1) 🖼\n ✓ Preparing nodes 📦\n ✓ Writing configuration 📜\n ✓ Starting control-plane 🕹️\n ✓ Installing CNI 🔌\n ✓ Installing StorageClass 💾\nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nThanks for using kind! 😊\n```\n4. 使用 kubectl 部署 deployment `kubectl create deployment nginx --image=nginx`\n```\nNAME    READY   UP-TO-DATE   AVAILABLE   AGE\nnginx   1/1     1            0           63s\n```","tags":["Kubernetes","Kind"]},{"title":"Confluence Server 数据库迁移 from H2 to MySQL","url":"/2020/06/22/Confluence-Server-数据库迁移-from-H2-to-MySQL/","content":"\n## 背景\n之前按照 [Docker安装Confluence](https://www.jianshu.com/p/8e81caca5f2a) 部署了 confluence server。前期为了方便直接使用了 confluence 内嵌的 H2 数据库。后续小伙伴陆陆续续开始使用起来后，为了稳定还是按照官方要求使用外部数据库，并将现有的数据进行迁移。\n\n## 操作步骤\n### 备份 confluence \n1. 使用管理员账号进入 **站点管理** -> **一般配置** -> **备份与还原**，对当前 confluence 进行备份操作\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c6bd9e19dc5ad?f=png&s=63731\" width=\"648\" height=\"286\" />\n</div>\n\n备份完成后，会在容器 `/var/atlassian/confluence/backups/` 目录下生成相应的备份文件\n\n2. 执行 `docker cp 8172e44b0b61:/var/atlassian/confluence/backups/xmlexport-20200619-051237-3.zip /home/confluence` 命令将站点备份文件从容器中拷贝至主机目录下\n\n### 安装 MySQL\n亲测 MySQL 8.0 不支持，最后选用 MySQL 5.7，提供两种方式进行部署\n\n#### Host 部署 MySQL\n1. 直接 apt 安装 MySQL `sudo apt-get install mysql-server`\n2. 进行 MySQL 的初始化 `sudo mysql_secure_installation`\n3. 进入 MySQL 终端，创建 confluence 库和用户并且授权\n```\nmysql> CREATE DATABASE confluence CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n\nmysql> CREATE USER 'confluence'@'%' IDENTIFIED BY '<password>';\n\nmysql> GRANT ALL PRIVILEGES ON confluence.* TO 'confluence'@'%' IDENTIFIED BY '<password>';\n\nmysql> flush privileges; \n```\n\n4. 修改 MySQL 配置文件 \n\n```\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n\n[mysqld]\nbind-address = 0.0.0.0 #127.0.0.1\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_bin\ndefault-storage-engine = INNODB\nmax_allowed_packet = 256M\ninnodb_log_file_size = 2GB\ntransaction-isolation = READ-COMMITTED\n```\n\n重启 MySQL `systemctl restart mysql`\n\n#### Docker 部署 MySQL\n1. 拉取 MySQL 镜像 `docker pull mysql:5.7`\n2. 创建 MySQL 容器 `docker run -p 3306:3306 --name mysql -v /data/mysql:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=<password> -d mysql:5.7`\n3. 进入容器修改配置 `docker exec -it mysql /bin/bash`\n4. 创建 confluence 库和用户并且授权\n```\nmysql> CREATE DATABASE confluence CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n\nmysql> CREATE USER 'confluence'@'%' IDENTIFIED BY '<password>';\n\nmysql> GRANT ALL PRIVILEGES ON confluence.* TO 'confluence'@'%' IDENTIFIED BY '<password>';\n\nmysql> flush privileges; \n```\n5.修改 MySQL 配置文件\n```\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n\n[mysqld]\nbind-address = 0.0.0.0 #127.0.0.1\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_bin\ndefault-storage-engine = INNODB\nmax_allowed_packet = 256M\ninnodb_log_file_size = 2GB\ntransaction-isolation = READ-COMMITTED\n```\n6. 重启 MySQL 容器 `docker restart mysql`\n\n### 部署新的 confluence\n1. 将之前的 confluence 容器停止 `docker stop 8172e44b0b61`\n2. 创建新的 confluence 容器 `docker run -d -v /data/conflunece:/var/atlassian/confluence --name confluence -p 8090:8090 --user root:root cptactionhank/atlassian-confluence:latest `\n3. 选择使用非内置数据库\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf145a3b81231?f=png&s=63589\" width=\"603\" height=\"328\" />\n</div>\n\n4. 配置数据库连接\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf1a5de0831bc?f=png&s=71044\" width=\"606\" height=\"400\" />\n</div>\n\n### 数据迁移\n1. 在**加载内容** 页选择 **从备份还原**\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf21da53ad4ec?f=png&s=88344\" width=\"606\" height=\"416\" />\n</div>\n\n2. 将之前站点备份文件导入 `cp /home/confluence/xmlexport-20200619-051237-3.zip /data/conflunece/restore/`\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf24a1e450e1d?f=png&s=40713\" width=\"609\" height=\"220\" />\n</div>\n\n3. 等待数据还原\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf255a3a21f5b?f=png&s=35665\" width=\"607\" height=\"270\" />\n</div>\n\n4. 恢复完成\n\n<div align=\"center\">    \n    <img src=\"https://user-gold-cdn.xitu.io/2020/6/20/172cf2ceba712728?f=png&s=22243\" width=\"606\" height=\"203\" />\n</div>\n","tags":["Confluence","Docker"]},{"title":"kubeadm 初探","url":"/2020/01/06/kubeadm-初探/","content":"\n使用 kubeadm 安装 k8s 集群步骤整理。\n\n## 示例服务器准备\n\nAzure VM 上创建三台 centos 7.5 服务器分别作为 k8s master 和 k8s worker：\n\n```\nmaster: 207.46.156.242\nworker1: 207.46.151.202\nworker2: 168.63.140.91\n```\n\n## 操作步骤\n### 安装 Docker\n\n#### 安装相关依赖\n\n```\nsudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n#### 添加 Docker 仓库\n\n```\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n#### 安装 Docker \n\n```\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n#### 启动 Docker\n\n```\nsudo systemctl start docker\n\nsudo systemctl enable docker\n```\n\n### 安装 kubeadm\n\n#### 安装 kubeadm , kubelet , kubectl\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n\n# Set SELinux in permissive mode (effectively disabling it)\nsetenforce 0\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\nyum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\nsystemctl enable --now kubelet\n```\n\n#### 修改 Docker cgroups 启动\n\n创建 `/etc/docker/daemon.json` 文件，加入以下内容\n\n```\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"]\n}\n```\n重启 Docker\n\n```\nsystemctl restart docker\n```\n\n查看修改后状态\n\n```\ndocker info | grep Cgroup\n\nCgroup Driver: systemd\n```\n\n#### 配置 bridge \n\n```\necho 1 > /proc/sys/net/bridge/bridge-nf-call-iptables\necho 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables\n```\n\n### 使用 kubeadm 部署 k8s 集群\n\n#### master 节点\n\n##### 执行初始化命令\n\n```\nkubeadm init\n```\n\n##### 记录 join 参数命令\n\n```\nkubeadm join 10.0.1.4:6443 --token mv7ql6.zvcdldux0io1kspb \\\n    --discovery-token-ca-cert-hash sha256:45746646f0f96bff66d66bd28a16312df3c6864f04fab58a7442609e3c207ddc\n```\n\n##### 执行集群配置命令\n\n```\nmkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n##### 部署网络插件\n\n```\nkubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n\n#### worker 节点\n\n分别执行 join 命令\n\n```\nkubeadm join 10.0.1.4:6443 --token mv7ql6.zvcdldux0io1kspb \\\n    --discovery-token-ca-cert-hash sha256:45746646f0f96bff66d66bd28a16312df3c6864f04fab58a7442609e3c207ddc\n```\n\n在 master 节点上查看 node 状态\n\n```\nkubectl get nodes\n\nNAME       STATUS   ROLES    AGE     VERSION\nmaster     Ready    master   8m45s   v1.17.0\nworker01   Ready    <none>   2m31s   v1.17.0\nworker02   Ready    <none>   2m23s   v1.17.0\n```\n\n\n\n\n\n\n","tags":["k8s","kubeadm"]},{"title":"MySQL Binlog Replication","url":"/2020/01/05/MySQL-Binlog-Replication/","content":"\nMySQL 开启 binlog 配置主从同步步骤整理。\n\n\n## 示例服务器准备\n\nAzure VM 上创建两台 centos 7.5 服务器分别作为 MySQL master 和 My SQL slave：\n\n* master: 13.75.108.150\n* slave: 13.75.109.41\n\n## 操作步骤\n### 安装 MySQL \n#### 添加 MySQL 5.7仓库\n\n```\nsudo rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\n```\n\n#### 安装 MySQL 5.7\n\n```\nsudo yum -y install mysql-community-server\n```\n\n#### MySQL 服务配置\n\n##### 启动 MySQL 服务\n\n```\nsudo systemctl start mysqld\n```\n\n##### 设置开启自启\n\n```\nsudo systemctl enable mysqld\n```\n\n#### 安全设置\n\n##### 获取 MySQL 临时密码\n\n```\ncat /var/log/mysqld.log | grep -i 'temporary password'\n```\n\n##### 配置安全设置\n\n```\nmysql_secure_installation\n```\n\n### 配置 binlog 主从同步\n\n#### master 服务器配置\n\n##### 创建同步用户\n\n```\nmysql> CREATE USER 'slave'@'%' IDENTIFIED BY '{YOUR PASSWORD}';\n\nmysql> GRANT ALL PRIVILEGES ON *.* TO slave@\"%\" IDENTIFIED BY \"{YOUR PASSWORD}\";\n```\n\n##### 开启 binlog\n\n修改 `/etc/my.cnf` 文件，添加内容如下：\n\n```\nlog-bin=mysql-bin\nserver-id=10\n```\n\n重启 MySQL 服务：\n\n```\nsystemctl restart mysqld.service\n```\n\n##### 获取初始同步位置\n\n```\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000001 |      154 |              |                  |                   |\n+------------------+----------+--------------+------------------+-------------------+\n```\n\n#### slave 服务器配置\n\n##### 修改 MySQL 配置\n\n修改 `/etc/my.cnf` 文件，添加内容如下：\n\n```\nserver-id=12\nreplicate-do-db=test\nskip-slave-start=true\n```\n\n重启 MySQL 服务：\n\n```\nsystemctl restart mysqld.service\n```\n\n##### 配置主从同步\n\n停止 slave 服务进程：\n\n```\nmysql> stop slave;\n```\n\n配置同步上游信息：\n\n```\nmysql> change master to \nmaster_host='13.75.108.150',\nmaster_user='slave',\nmaster_password='{YOUR PASSWORD}',\nmaster_log_file='mysql-bin.000001', \nmaster_log_pos=313;\n```\n\n开启 slave 服务进程：\n\n```\nmysql> start slave;\n```\n\n查看 slave 同步状态：\n\n```\nmysql> show slave status\\G;\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 13.75.108.150\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 1064\n               Relay_Log_File: slave-relay-bin.000002\n                Relay_Log_Pos: 1071\n        Relay_Master_Log_File: mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: test\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 1064\n              Relay_Log_Space: 1278\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 10\n                  Master_UUID: 8c019b28-306a-11ea-80a3-000d3a8507a5\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n```","tags":["MySQL","Binlog"]},{"title":"First Blog","url":"/2019/12/24/First-Blog/"}]